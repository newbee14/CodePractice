Index: src/main/java/Concurrency/ExecutorServiceExample.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Concurrency;\n\nimport java.util.concurrent.*;\n\npublic class ExecutorServiceExample {\n    public static void main(String[] args) {\n        Phaser phaser = new Phaser(1);\n        ThreadPoolExecutor executor = new ThreadPoolExecutor(\n                2, 4,2, TimeUnit.SECONDS,new ArrayBlockingQueue<>(3),\n                new CustomThreadFactory(), new CustomRejectedExecutionHandler());\n\n        for (int i = 0; i < 10; i++) {\n            executor.submit(()->{\n                System.out.println(\"Thread name \"+Thread.currentThread().getName());\n            });\n            System.out.println(executor);\n        }\n        phaser.arriveAndAwaitAdvance();\n        System.out.println(\"executor.getQueue() = \" + executor.getQueue().size());\n        while(!executor.getQueue().isEmpty()){\n            System.out.println(\"executor.getQueue() = \" + executor.getQueue().size());\n        }\n    }\n}\n\nclass CustomThreadFactory implements ThreadFactory{\n\n    @Override\n    public Thread newThread(Runnable r) {\n        return new Thread(r);\n    }\n}\n\nclass CustomRejectedExecutionHandler implements RejectedExecutionHandler{\n\n    @Override\n    public void rejectedExecution(Runnable r, ThreadPoolExecutor executor) {\n        System.out.println(\"Task rejected \"+ executor);\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Concurrency/ExecutorServiceExample.java b/src/main/java/Concurrency/ExecutorServiceExample.java
--- a/src/main/java/Concurrency/ExecutorServiceExample.java	(revision 75c4d3a4c108579175560ad197a3ec76fafeac9c)
+++ b/src/main/java/Concurrency/ExecutorServiceExample.java	(date 1715110353850)
@@ -21,6 +21,7 @@
             System.out.println("executor.getQueue() = " + executor.getQueue().size());
         }
     }
+
 }
 
 class CustomThreadFactory implements ThreadFactory{
